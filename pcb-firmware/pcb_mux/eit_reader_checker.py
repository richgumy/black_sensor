"""
FILE: eit_reader_checker.py
AUTHOR: R Ellingham
DATE CREATED: July 2023
DATE MODIFIED: July 2023
PROGRAM DESC: Checks .csv file generated by eit_reader.py for unstable inter-electrode resistance and gives the inter-electrode resistance values.
Also generates a report giving:
- number of cycles (i.e. recon frames)
- total time
- mean/median min and max sample time
- min and max voltage
- min and max current
- all adjacent electrode resistance mean and range values

Use:
> python eit_reader_checker.py <file_dir> <i_src_A>

"""
import pandas as pd
import numpy as np   
import matplotlib.pyplot as plt   


def get_inter_elec_res(v_data_V, i_src_A, num_elecs=16):
    '''
    Description: 
    ----------
        Program finds the interelectrode resistance for each EIT scan.
        
    Parameters:
    ----------
    v_data_V : float (1,n)array
        Voltage data from a scan in shape 
    i_src_A : float
        Constant curernt source value used for EIT scan
    num_elecs : int, optional
        DESCRIPTION. The default is 16.

    Returns:
    -------
    r_elec_arr_, r_adj_mean, r_adj_range

    '''
    v_data_V = np.array(v_data_V[0:16*(len(v_data_V)//16)])
    shaped_v_data_V = np.reshape(v_data_V,(len(v_data_V)//num_elecs,num_elecs)).astype(float)
    num_cycles = len(v_data_V)//(num_elecs**2)
    r_elec_arr = np.zeros((num_cycles,num_elecs))
    for i in range(len(shaped_v_data_V)//num_elecs):
        r_elec_arr[i] = abs(np.diagonal(shaped_v_data_V[num_elecs*i:num_elecs*(i+1)] / (np.eye(num_elecs)*i_src_A)))
    r_adj_mean = np.mean(r_elec_arr,0)
    r_adj_range = (np.max(r_elec_arr,0)-np.min(r_elec_arr,0))/2
    
    return r_elec_arr, r_adj_mean, r_adj_range



def report(file_dir, i_src_A, v_max_V=20, num_elecs=16, tol_r_adj=0.02, tol_v_max=0.95):
    # Raises warnings if inter-electrode resistance varies > tol_r_adj(*100%) and if near v_max_V(*100%)
    # flag if any warnings in place
    r_adj_flag = 0 
    v_max_flag = 0
    elec_data_raw = pd.read_csv(file_dir,skiprows=1)
    elec_data_raw['voltage [V]'][1:-1] = elec_data_raw['voltage [V]'][0:-2] # shift all readings by one
    print(elec_data_raw)
    elec_data_raw['voltage [V]'][0] = elec_data_raw['voltage [V]'][num_elecs**2]
    # split data
    r_adj_ohm, r_adj_mean_ohm, r_adj_range_ohm = get_inter_elec_res(elec_data_raw['voltage [V]'], i_src_A)
    t_arr_s = elec_data_raw['time_pc [s]']
    td_arr_s = (np.array(t_arr_s[1:])-np.array(t_arr_s[0:-1]))
    v_arr_V = elec_data_raw['voltage [V]']
    i_arr_A = elec_data_raw['i_src [A]']
    i_arr_A = np.array(i_arr_A)
    cycles = len(v_arr_V)//num_elecs**2
    title = f"*** EIT reader report for : {file_dir} ***"
    # print report
    print(f"{(len(title))*'*'}")
    print(f"{title}")
    print(f"{(len(title))*'*'}")
    print(f"num cycles ={cycles}")
    print(f"total time [s] ={t_arr_s.max():.8g}s")
    print(f"sample time [s] - mean={np.mean(td_arr_s):.2e}s, median={np.median(td_arr_s):.2e}s, min={np.min(td_arr_s):.2e}s, max={np.max(td_arr_s):.2e}s")
    print(f"sample freq. [Hz] mean={1/((num_elecs**2)*np.mean(td_arr_s)):.2e}Hz")
    print(f"V max={v_max_V:.2e}V")
    if max(abs(v_arr_V)) > tol_v_max*v_max_V:
        print(f"voltage [V] - min={np.min(v_arr_V):.2e}V, max={np.max(v_arr_V):.2e}V ! Max voltage warning !")
        v_max_flag = v_max_flag + 1
    else:
        print(f"voltage [V] - min={np.min(v_arr_V):.2e}V, max={np.max(v_arr_V):.2e}V")
    print(f"i_src set [A] ={i_src_A:.2e}A")
    print(f"i_src actual [A] - min={np.nanmin(i_arr_A[np.nonzero(i_arr_A)]):.6e}A, max={np.nanmax(i_arr_A):.6e}A")
    print(f"r adjacent [Ohm] - min={np.min(r_adj_ohm):.2e} Ohm, max={np.max(r_adj_ohm):.2e} Ohm, mean=")
    for i in range(num_elecs):
        if r_adj_range_ohm[i]/r_adj_mean_ohm[i] > tol_r_adj:
            print(f"\tE{i}={r_adj_mean_ohm[i]:.2e} \t +/- {r_adj_range_ohm[i]:.2e} Ohm ! Warning unstable electrode !")
            r_adj_flag = r_adj_flag + 1
        else:
            print(f"\tE{i}={r_adj_mean_ohm[i]:.2e} \t +/- {r_adj_range_ohm[i]:.2e} Ohm")
    print(f"{(len(title))*'*'}")
    if r_adj_flag:
        plt.figure(2,figsize=(12,5))
        plt.plot(r_adj_ohm)
        plt.title(f'Electrode resistance plot over time - {file_dir}')
        plt.xlabel('cycles [n]')
        plt.xlim((0,cycles))
        plt.ylabel('inter-electrode resistance [Ohm]')
        plt.legend(np.linspace(0,num_elecs-1,num_elecs),title='Electrode #:',loc='right')
        plt.show()
    return r_adj_flag, v_max_flag

def main():
    return 0

if __name__ == "__main__":
    import sys
    if len(sys.argv)>1: 
        file_dir = sys.argv[1]
    if len(sys.argv)>2: 
        i_src_A = float(sys.argv[2])

    report(file_dir,i_src_A)
